name: New Boundary access request

on:
  issues:
    types: [opened]

permissions: 
  issues: write

jobs:
  provide-access:
    env:
      BOUNDARY_ADDR: ${{ vars.BOUNDARY_ADDR }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          regex="([0-9]) hour"
          if [[ "${{ github.event.issue.body }}" =~ $regex ]]
          then
              hours="${BASH_REMATCH[1]}"
              echo "Will give access for ${hours} hour(s)"
          else
              echo "Could not parse the number of hours, defaults to 1 hour"
              hours=1
          fi

          regex="(aws.[a-z0-9]+.[a-z0-9]+)"
          if [[ "${{ github.event.issue.body }}" =~ $regex ]]
          then
              target="${BASH_REMATCH[1]}"
              echo "Will give access to target ${target}"
          else
              echo "Could not parse the target, exits"
              exit 1
          fi

          echo "BOUNDARY_TARGET_ALIAS=$target" >> $GITHUB_ENV
          echo "DELTA_TIME=$hours" >> $GITHUB_ENV
      - name: Install Boundary
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install boundary
      - name: Sign-in to Boundary
        run: |
          BOUNDARY_TOKEN=$(boundary authenticate password \
            -format=json \
            -keyring-type=none \
            -login-name=${{ vars.BOUNDARY_USERNAME }} \
            -password=env://BOUNDARY_PASSWORD | jq -r '.item.attributes.token')

            # set the boundary token as en environment variable for later steps
            echo "BOUNDARY_TOKEN=$BOUNDARY_TOKEN" >> $GITHUB_ENV
        env:
          BOUNDARY_PASSWORD: ${{ secrets.BOUNDARY_PASSWORD }}
      - name: Configure access
        run: |
          echo "::add-mask::$BOUNDARY_TOKEN"
          
          # find the correct user
          BOUNDARY_ACCOUNT_ID=$(boundary accounts list \
            -token=env://BOUNDARY_TOKEN \
            -format=json \
            -auth-method-id=${{ vars.BOUNDARY_AUTH_METHOD_ID }} \
            -filter '"/item/name" == "${{ github.event.issue.user.login }}"' | \
            jq -r '.items[0].id')
          echo "Account ID: $BOUNDARY_ACCOUNT_ID"
          
          BOUNDARY_USER_ID=$(boundary users list \
            -token=env://BOUNDARY_TOKEN \
            -recursive \
            -format=json \
            -filter="\"/item/primary_account_id\" == \"$BOUNDARY_ACCOUNT_ID\"" | \
            jq -r '.items[0].id')
          echo "User ID: $BOUNDARY_USER_ID"
          
          BOUNDARY_ROLE_ID=$(boundary roles list \
            -token=env://BOUNDARY_TOKEN \
            -recursive \
            -format=json \
            -filter='"/item/name" == "${{ env.BOUNDARY_TARGET_ALIAS }}"' | \
            jq -r '.items[0].id')
          echo "Role ID: $BOUNDARY_ROLE_ID"
          
          # add principal to the role
          boundary roles add-principals \
            -token=env://BOUNDARY_TOKEN \
            -id="$BOUNDARY_ROLE_ID" \
            -principal="$BOUNDARY_USER_ID"
      - name: Post comment to issue confirming access
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Access have been granted âœ…. Remove access in ${{ env.DELTA_TIME }} hours.'
            })
 